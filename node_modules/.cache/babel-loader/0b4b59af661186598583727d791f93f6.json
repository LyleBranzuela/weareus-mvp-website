{"ast":null,"code":"var AWS = require('./core');\n\nvar SequentialExecutor = require('./sequential_executor');\n\nvar DISCOVER_ENDPOINT = require('./discover_endpoint').discoverEndpoint;\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\n\n\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {}\n  /* doc hack */\n\n};\n/**\n * @api private\n */\n\nfunction getOperationAuthtype(req) {\n  if (!req.service.api.operations) {\n    return '';\n  }\n\n  var operation = req.service.api.operations[req.operation];\n  return operation ? operation.authtype : '';\n}\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function (add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate', function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done(); // none\n\n      req.service.config.getCredentials(function (err) {\n        if (err) {\n          req.response.error = AWS.util.error(err, {\n            code: 'CredentialsError',\n            message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1'\n          });\n        }\n\n        done();\n      });\n    });\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.isGlobalEndpoint) {\n        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n        if (!req.service.config.region) {\n          req.response.error = AWS.util.error(new Error(), {\n            code: 'ConfigError',\n            message: 'Missing region in config'\n          });\n        } else if (!dnsHostRegex.test(req.service.config.region)) {\n          req.response.error = AWS.util.error(new Error(), {\n            code: 'ConfigError',\n            message: 'Invalid region in config'\n          });\n        }\n      }\n    });\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n\n      var operation = req.service.api.operations[req.operation];\n\n      if (!operation) {\n        return;\n      }\n\n      var idempotentMembers = operation.idempotentMembers;\n\n      if (!idempotentMembers.length) {\n        return;\n      } // creates a copy of params so user's param object isn't mutated\n\n\n      var params = AWS.util.copy(req.params);\n\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n\n      req.params = params;\n    });\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n\n      if (!req.service.api.operations) {\n        return;\n      }\n\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done(); // none\n\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n\n        AWS.util.computeSha256(body, function (err, sha) {\n          if (err) {\n            done(err);\n          } else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      var authtype = getOperationAuthtype(req);\n      var payloadMember = AWS.util.getRequestPayloadShape(req);\n\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        try {\n          var length = AWS.util.string.byteLength(req.httpRequest.body);\n          req.httpRequest.headers['Content-Length'] = length;\n        } catch (err) {\n          if (payloadMember && payloadMember.isStreaming) {\n            if (payloadMember.requiresLength) {\n              //streaming payload requires length(s3, glacier)\n              throw err;\n            } else if (authtype.indexOf('unsigned-body') >= 0) {\n              //unbounded streaming payload(lex, mediastore)\n              req.httpRequest.headers['Transfer-Encoding'] = 'chunked';\n              return;\n            } else {\n              throw err;\n            }\n          }\n\n          throw err;\n        }\n      }\n    });\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n      this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n    var addToHead = true;\n    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = service.getSkewCorrectedDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest, service.api.signingName || service.api.endpointPrefix, {\n            signatureCache: service.config.signatureCache,\n            operation: operation,\n            signatureVersion: service.api.signatureVersion\n          });\n          signer.setServiceClientId(service._clientId); // clear old authorization headers\n\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date']; // add new authorization\n\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n\n        done();\n      });\n    });\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(), {\n          code: 'UnknownError',\n          message: 'An unknown error occurred.'\n        });\n      }\n    });\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n        var service = resp.request.service;\n        var api = service.api;\n        var operationName = resp.request.operation;\n        var operation = api.operations[operationName] || {};\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp, statusMessage]);\n\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) {\n              // streams2 API check\n              // if we detect event streams, we're going to have to\n              // return the stream immediately\n              if (operation.hasEventOutput && service.successfulResponse(resp)) {\n                // skip reading the IncomingStream\n                resp.request.emit('httpDone');\n                done();\n                return;\n              }\n\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else {\n              // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            if (AWS.HttpClient.streamsApiVersion === 2 && operation.hasEventOutput && service.successfulResponse(resp)) {\n              // don't concatenate response chunks when streaming event stream data when response is successful\n              return;\n            }\n\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n\n      function error(err) {\n        if (err.code !== 'RequestAbortedError') {\n          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';\n          err = AWS.util.error(err, {\n            code: errCode,\n            region: resp.request.httpRequest.region,\n            hostname: resp.request.httpRequest.endpoint.hostname,\n            retryable: true\n          });\n        }\n\n        resp.error = err;\n        resp.request.emit('httpError', [resp.error, resp], function () {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n\n      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;\n\n      if (timeDiff >= 60 * 10) {\n        // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function (err) {\n          if (err) done(err);else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n    add('HTTP_HEADERS', 'httpHeaders', function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = AWS.util.buffer.toBuffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      var service = resp.request.service;\n\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n\n        if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {\n          service.applyClockOffset(serverTime);\n        }\n      }\n    });\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = {\n            loaded: resp.httpResponse.numBytes,\n            total: total\n          };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));\n      }\n    });\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n\n      if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {\n        resp.error.retryable = true;\n      }\n    });\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;\n        }\n      }\n    });\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay,\n          willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      } // delay < 0 is a signal from customBackoff to skip retries\n\n\n      if (willRetry && delay >= 0) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n  CorePost: new SequentialExecutor().addNamedListeners(function (add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      function isDNSError(err) {\n        return err.errno === 'ENOTFOUND' || typeof err.errno === 'number' && typeof AWS.util.getSystemErrorName === 'function' && ['EAI_NONAME', 'EAI_NODATA'].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);\n      }\n\n      if (err.code === 'NetworkingError' && isDNSError(err)) {\n        var message = 'Inaccessible host: `' + err.hostname + '\\'. This service may not be available in the `' + err.region + '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n  Logger: new SequentialExecutor().addNamedListeners(function (add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n\n      function filterSensitiveLog(inputShape, shape) {\n        if (!shape) {\n          return shape;\n        }\n\n        if (inputShape.isSensitive) {\n          return '***SensitiveInformation***';\n        }\n\n        switch (inputShape.type) {\n          case 'structure':\n            var struct = {};\n            AWS.util.each(shape, function (subShapeName, subShape) {\n              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {\n                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);\n              } else {\n                struct[subShapeName] = subShape;\n              }\n            });\n            return struct;\n\n          case 'list':\n            var list = [];\n            AWS.util.arrayEach(shape, function (subShape, index) {\n              list.push(filterSensitiveLog(inputShape.member, subShape));\n            });\n            return list;\n\n          case 'map':\n            var map = {};\n            AWS.util.each(shape, function (key, value) {\n              map[key] = filterSensitiveLog(inputShape.value, value);\n            });\n            return map;\n\n          default:\n            return shape;\n        }\n      }\n\n      function buildMessage() {\n        var time = resp.request.service.getSkewCorrectedDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var censoredParams = req.params;\n\n        if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {\n          var inputShape = req.service.api.operations[req.operation].input;\n          censoredParams = filterSensitiveLog(inputShape, req.params);\n        }\n\n        var params = require('util').inspect(censoredParams, true, null);\n\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n  Json: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/json');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Rest: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestJson: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_json');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestXml: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_xml');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Query: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/query');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};","map":{"version":3,"sources":["C:/Users/admin/Downloads/School Stuff/Year 3/Research and Development Part 2/weareus-mvp-website/node_modules/aws-sdk/lib/event_listeners.js"],"names":["AWS","require","SequentialExecutor","DISCOVER_ENDPOINT","discoverEndpoint","EventListeners","Core","getOperationAuthtype","req","service","api","operations","operation","authtype","addNamedListeners","add","addAsync","VALIDATE_CREDENTIALS","done","signatureVersion","config","getCredentials","err","response","error","util","code","message","VALIDATE_REGION","isGlobalEndpoint","dnsHostRegex","RegExp","region","Error","test","BUILD_IDEMPOTENCY_TOKENS","idempotentMembers","length","params","copy","i","iLen","uuid","v4","VALIDATE_PARAMETERS","rules","input","validation","paramValidation","ParamValidator","validate","COMPUTE_SHA256","haltHandlersOnError","getSignerClass","Signers","V4","body","httpRequest","indexOf","headers","computeSha256","sha","SET_CONTENT_LENGTH","payloadMember","getRequestPayloadShape","undefined","string","byteLength","isStreaming","requiresLength","SET_HTTP_HOST","endpoint","host","RESTART","retryable","HttpRequest","retryCount","maxRetries","addToHead","SIGN","credentials","date","getSkewCorrectedDate","SignerClass","signer","signingName","endpointPrefix","signatureCache","setServiceClientId","_clientId","addAuthorization","signedAt","e","VALIDATE_RESPONSE","resp","successfulResponse","data","SEND","httpResponse","_abortCallback","callback","httpResp","stream","request","operationName","on","onHeaders","statusCode","statusMessage","emit","streaming","HttpClient","streamsApiVersion","hasEventOutput","onReadable","read","onData","onEnd","didCallback","progress","onSendProgress","value","onReceiveProgress","errCode","hostname","executeSend","http","getInstance","httpOptions","handleRequest","timeDiff","HTTP_HEADERS","buffer","toBuffer","buffers","numBytes","dateHeader","Date","serverTime","parse","correctClockSkew","isClockSkewed","applyClockOffset","HTTP_DATA","chunk","isNode","total","loaded","push","HTTP_DONE","concat","FINALIZE_ERROR","retryableError","INVALIDATE_CREDENTIALS","expired","EXPIRED_SIGNATURE","match","CLOCK_SKEWED","clockSkewError","REDIRECT","Endpoint","redirect","RETRY_CHECK","redirectCount","maxRedirects","retryDelay","retryDelays","RESET_RETRY_STATE","delay","willRetry","setTimeout","CorePost","extractRequestId","ENOTFOUND_ERROR","isDNSError","errno","getSystemErrorName","originalError","Logger","LOG_REQUEST","logger","filterSensitiveLog","inputShape","shape","isSensitive","type","struct","each","subShapeName","subShape","Object","prototype","hasOwnProperty","call","members","list","arrayEach","index","member","map","key","buildMessage","time","getTime","delta","startTime","ansi","isTTY","status","censoredParams","inspect","serviceIdentifier","toString","lowerFirst","line","log","write","Json","svc","buildRequest","extractData","extractError","Rest","RestJson","RestXml","Query"],"mappings":"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","sourcesContent":["var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\nvar DISCOVER_ENDPOINT = require('./discover_endpoint').discoverEndpoint;\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\n/**\n * @api private\n */\nfunction getOperationAuthtype(req) {\n  if (!req.service.api.operations) {\n    return '';\n  }\n  var operation = req.service.api.operations[req.operation];\n  return operation ? operation.authtype : '';\n}\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate',\n        function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function(err) {\n        if (err) {\n          req.response.error = AWS.util.error(err,\n            {code: 'CredentialsError', message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1'});\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.isGlobalEndpoint) {\n        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n        if (!req.service.config.region) {\n          req.response.error = AWS.util.error(new Error(),\n            {code: 'ConfigError', message: 'Missing region in config'});\n        } else if (!dnsHostRegex.test(req.service.config.region)) {\n          req.response.error = AWS.util.error(new Error(),\n            {code: 'ConfigError', message: 'Invalid region in config'});\n        }\n      }\n    });\n\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var idempotentMembers = operation.idempotentMembers;\n      if (!idempotentMembers.length) {\n        return;\n      }\n      // creates a copy of params so user's param object isn't mutated\n      var params = AWS.util.copy(req.params);\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n      req.params = params;\n    });\n\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done(); // none\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n        AWS.util.computeSha256(body, function(err, sha) {\n          if (err) {\n            done(err);\n          }\n          else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      var authtype = getOperationAuthtype(req);\n      var payloadMember = AWS.util.getRequestPayloadShape(req);\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        try {\n          var length = AWS.util.string.byteLength(req.httpRequest.body);\n          req.httpRequest.headers['Content-Length'] = length;\n        } catch (err) {\n          if (payloadMember && payloadMember.isStreaming) {\n            if (payloadMember.requiresLength) {\n              //streaming payload requires length(s3, glacier)\n              throw err;\n            } else if (authtype.indexOf('unsigned-body') >= 0) {\n              //unbounded streaming payload(lex, mediastore)\n              req.httpRequest.headers['Transfer-Encoding'] = 'chunked';\n              return;\n            } else {\n              throw err;\n            }\n          }\n          throw err;\n        }\n      }\n    });\n\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n\n      this.httpRequest = new AWS.HttpRequest(\n        this.service.endpoint,\n        this.service.region\n      );\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n\n    var addToHead = true;\n    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);\n\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = service.getSkewCorrectedDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest,\n            service.api.signingName || service.api.endpointPrefix,\n            {\n              signatureCache: service.config.signatureCache,\n              operation: operation,\n              signatureVersion: service.api.signatureVersion\n            });\n          signer.setServiceClientId(service._clientId);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(),\n          {code: 'UnknownError', message: 'An unknown error occurred.'});\n      }\n    });\n\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n        var service = resp.request.service;\n        var api = service.api;\n        var operationName = resp.request.operation;\n        var operation = api.operations[operationName] || {};\n\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit(\n            'httpHeaders',\n            [statusCode, headers, resp, statusMessage]\n          );\n\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check\n              // if we detect event streams, we're going to have to\n              // return the stream immediately\n              if (operation.hasEventOutput && service.successfulResponse(resp)) {\n                // skip reading the IncomingStream\n                resp.request.emit('httpDone');\n                done();\n                return;\n              }\n\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else { // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {\n              // don't concatenate response chunks when streaming event stream data when response is successful\n              return;\n            }\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n\n      function error(err) {\n        if (err.code !== 'RequestAbortedError') {\n          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';\n          err = AWS.util.error(err, {\n            code: errCode,\n            region: resp.request.httpRequest.region,\n            hostname: resp.request.httpRequest.endpoint.hostname,\n            retryable: true\n          });\n        }\n        resp.error = err;\n        resp.request.emit('httpError', [resp.error, resp], function() {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,\n                                          callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function(err) {\n          if (err) done(err);\n          else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n\n    add('HTTP_HEADERS', 'httpHeaders',\n        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = AWS.util.buffer.toBuffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      var service = resp.request.service;\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n        if (service.config.correctClockSkew\n            && service.isClockSkewed(serverTime)) {\n          service.applyClockOffset(serverTime);\n        }\n      }\n    });\n\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));\n      }\n    });\n\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n      if (this.service.clockSkewError(resp.error)\n          && this.service.config.correctClockSkew) {\n        resp.error.retryable = true;\n      }\n    });\n\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 &&\n          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint =\n          new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;\n        }\n      }\n    });\n\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay, willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      // delay < 0 is a signal from customBackoff to skip retries\n      if (willRetry && delay >= 0) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n\n  CorePost: new SequentialExecutor().addNamedListeners(function(add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      function isDNSError(err) {\n        return err.errno === 'ENOTFOUND' ||\n          typeof err.errno === 'number' &&\n          typeof AWS.util.getSystemErrorName === 'function' &&\n          ['EAI_NONAME', 'EAI_NODATA'].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);\n      }\n      if (err.code === 'NetworkingError' && isDNSError(err)) {\n        var message = 'Inaccessible host: `' + err.hostname +\n          '\\'. This service may not be available in the `' + err.region +\n          '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n\n  Logger: new SequentialExecutor().addNamedListeners(function(add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n      function filterSensitiveLog(inputShape, shape) {\n        if (!shape) {\n          return shape;\n        }\n        if (inputShape.isSensitive) {\n          return '***SensitiveInformation***';\n        }\n        switch (inputShape.type) {\n          case 'structure':\n            var struct = {};\n            AWS.util.each(shape, function(subShapeName, subShape) {\n              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {\n                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);\n              } else {\n                struct[subShapeName] = subShape;\n              }\n            });\n            return struct;\n          case 'list':\n            var list = [];\n            AWS.util.arrayEach(shape, function(subShape, index) {\n              list.push(filterSensitiveLog(inputShape.member, subShape));\n            });\n            return list;\n          case 'map':\n            var map = {};\n            AWS.util.each(shape, function(key, value) {\n              map[key] = filterSensitiveLog(inputShape.value, value);\n            });\n            return map;\n          default:\n            return shape;\n        }\n      }\n\n      function buildMessage() {\n        var time = resp.request.service.getSkewCorrectedDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var censoredParams = req.params;\n        if (\n          req.service.api.operations &&\n              req.service.api.operations[req.operation] &&\n              req.service.api.operations[req.operation].input\n        ) {\n          var inputShape = req.service.api.operations[req.operation].input;\n          censoredParams = filterSensitiveLog(inputShape, req.params);\n        }\n        var params = require('util').inspect(censoredParams, true, null);\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n\n  Json: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Rest: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestJson: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestXml: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Query: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};\n"]},"metadata":{},"sourceType":"script"}