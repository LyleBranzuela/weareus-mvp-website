{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\School Stuff\\\\Year 3\\\\Research and Development Part 2\\\\weareus-mvp-website\\\\src\\\\manage-accounts\\\\Accounts.js\";\nimport React from \"react\";\nimport UserPool from \"./UserPool\";\nimport swal from \"@sweetalert/with-react\";\nimport { Form } from \"react-bootstrap\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\"; // import { useSelector, useDispatch } from \"react-redux\";\n// import { signin } from \"../actions\";\n\nimport AWS from \"aws-sdk\";\n/* Setting up All The Redux States and Variablees*/\n// const isLogged = useSelector((state) => state.isLogged);\n// const dispatch = useDispatch();\n// Function to Get the Current Session's Information (Logged in or not)\n\nconst getSession = async () => {\n  await new Promise((resolve, reject) => {\n    const user = UserPool.getCurrentUser();\n\n    if (user) {\n      user.getSession((err, session) => {\n        if (err) {\n          reject();\n        } else {\n          resolve(session);\n        }\n      });\n    } else {\n      reject();\n    }\n  });\n}; // Returns a Cognitouser based on the email\n\n\nfunction getUser(email) {\n  return new CognitoUser({\n    Username: email.toLowerCase(),\n    Pool: UserPool\n  });\n} // Function to logout the User\n\n\nconst logout = () => {\n  const user = UserPool.getCurrentUser();\n\n  if (user) {\n    user.signOut(); // dispatch(signin());\n  }\n}; // Google Sign-in button's callback when pressed\n\n\nfunction googleSignInCallBack(authResult) {\n  console.log(authResult);\n\n  if (!authResult.error) {\n    // Add the Google access token to the Amazon Cognito credentials login map.\n    console.log(UserPool.getClientId());\n    console.log(authResult[\"tokenId\"]);\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: \"ap-southeast-2_70XMXEzjd\",\n      Logins: {\n        \"accounts.google.com\": authResult[\"tokenId\"]\n      }\n    }); // Obtain AWS credentials\n\n    AWS.config.credentials.get(function () {// Access AWS resources here.\n    });\n  }\n} // Facebook Sign-in button's callback when pressed\n\n\nfunction facebookSignInCallBack() {\n  const FB = window.FB;\n  FB.login(function (response) {\n    // Check if the user logged in successfully.\n    if (response.authResponse) {\n      // Add the Facebook access token to the Amazon Cognito credentials login map.\n      AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: \"ap-southeast-2_70XMXEzjd\",\n        Logins: {\n          \"graph.facebook.com\": response.authResponse.accessToken\n        }\n      }); // Obtain AWS credentials\n\n      AWS.config.credentials.get(function () {// Access AWS resources here.\n      });\n    } else {\n      console.log(\"There was a problem logging you in.\");\n    }\n  });\n} // Function to Authenticate Users in AWS Cognito\n\n\nconst authenticate = (Username, Password) => {\n  return new Promise((resolve, reject) => {\n    const user = new CognitoUser({\n      Username,\n      Pool: UserPool\n    });\n    const authDetails = new AuthenticationDetails({\n      Username,\n      Password\n    });\n    user.authenticateUser(authDetails, {\n      onSuccess: data => {\n        resolve(data);\n      },\n      onFailure: err => {\n        console.log(\"Authenticate User Error\" + err); // Problems in Authentication\n\n        swal({\n          title: \"Authentication Error!\",\n          text: err.message,\n          icon: \"error\",\n          buttons: [false, true]\n        });\n        reject(err);\n      },\n      newPasswordRequired: data => {\n        console.log(data);\n        swal({\n          title: \"New Password Required!\",\n          icon: \"error\",\n          buttons: [false, true]\n        }).then(() => {\n          resetPasswordModal();\n        });\n        resolve(data);\n      }\n    });\n  });\n}; // Shows the Reset Password Modal\n\n\nconst resetPasswordModal = () => {\n  // Generates the Reset Password Form to be called over and over again\n  function getResetPasswordForm(email, resetCode) {\n    return swal({\n      title: \"Change your Password!\",\n      text: \"Password has to be longer than 8 characters, numbers, has uppercase and lowercase letters.\",\n      content: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"resetFormStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"resetCode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Verification Code\",\n        defaultValue: resetCode ? resetCode : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"newPass\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"password\",\n        placeholder: \"New Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"confirmPass\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }))),\n      buttons: [true, \"Reset Password\"],\n      closeOnClickOutside: false,\n      closeOnEsc: false\n    }).then(data => {\n      if (data === true) {\n        // Reset Password Based on the Input Fields\n        let resetCode = document.getElementById(\"resetCode\").value;\n        let newPass = document.getElementById(\"newPass\").value;\n        let confirmPass = document.getElementById(\"confirmPass\").value;\n        resetPasswordForm(email, resetCode, newPass, confirmPass);\n      }\n    });\n  } // Function for Resetting the Password\n\n\n  function resetPasswordForm(email, code, newPass, confirmPass) {\n    if (newPass !== confirmPass) {\n      // Both passwords are not the same\n      swal({\n        title: \"Password and Confirm Password is not the same.\",\n        icon: \"error\",\n        buttons: [false, true],\n        closeOnClickOutside: false,\n        closeOnEsc: false\n      }).then(data => {\n        if (data === true) {\n          getResetPasswordForm(email, code);\n        }\n      });\n    } else {\n      getUser(email).confirmPassword(code, newPass, {\n        onSuccess: data => {\n          // Successful Reset Password Modal\n          swal({\n            title: \"Password Successfully Resetted!\",\n            icon: \"success\",\n            timer: 3000,\n            buttons: [false, true],\n            closeOnClickOutside: false,\n            closeOnEsc: false\n          });\n        },\n        onFailure: err => {\n          // Unsuccessful Reset Password Modal\n          swal({\n            title: \"Reset Password Error!\",\n            text: \"Something went wrong when resetting your password.\",\n            icon: \"error\",\n            buttons: [false, true],\n            closeOnClickOutside: false,\n            closeOnEsc: false\n          }).then(data => {\n            if (data === true) {\n              getResetPasswordForm(email, code);\n            }\n          });\n        }\n      });\n    }\n  } // Function to Send The Code to the Verification User's Email\n\n\n  function sendCode() {\n    // Reset Password Modal\n    swal({\n      title: \"Forgot Password?\",\n      text: \"Send a verification code to your forgotten account's email.\",\n      content:\n      /*#__PURE__*/\n\n      /* Form Section for Checking Verification Code */\n      React.createElement(Form.Group, {\n        controlId: \"resetEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"email\",\n        placeholder: \"Reset Email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }\n      })),\n      icon: \"info\",\n      buttons: [true, true],\n      closeOnClickOutside: false,\n      closeOnEsc: false\n    }).then(valueData => {\n      if (valueData === true) {\n        // Check Whether User Exists\n        let resetEmail = document.getElementById(\"resetEmail\").value;\n\n        if (resetEmail) {\n          getUser(resetEmail).forgotPassword({\n            onSuccess: data => {},\n            // Unsuccessful Forget Password Email Sent\n            onFailure: err => {\n              swal({\n                title: \"Email is Incorrect!\",\n                text: err.message,\n                icon: \"error\",\n                buttons: [false, true]\n              });\n            },\n            // Successful Forget Password Email Sent\n            inputVerificationCode: data => {\n              getResetPasswordForm(resetEmail);\n            }\n          });\n        } else {\n          // Check if Ok is pressed and the Email Field is Empty\n          swal({\n            title: \"Email Field is Empty!\",\n            text: \"Please input an existing email.\",\n            icon: \"error\",\n            buttons: [false, true]\n          });\n        }\n      }\n    });\n  }\n\n  return sendCode();\n}; // Asks for a Cognito User and Render the Modal\n\n\nconst AccountVerificationModal = currentUser => {\n  function renderModal(user) {\n    return swal({\n      title: \"Account Verification\",\n      text: \"A verification code should be sent to your email. If not, press the resend button below.\",\n      content:\n      /*#__PURE__*/\n\n      /* Form Section for Checking Verification Code */\n      React.createElement(Form.Group, {\n        controlId: \"confirmAccountCode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"Verification Code\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }\n      })),\n      icon: \"info\",\n      buttons: {\n        cancel: \"Cancel\",\n        resendCode: \"Resend Code\",\n        verify: \"Verify\"\n      },\n      closeOnClickOutside: false,\n      closeOnEsc: false\n    }).then(valueData => {\n      switch (valueData) {\n        // When Resend Code Button is Pressed - Resend the Verification Code to the Email\n        case \"resendCode\":\n          user.resendConfirmationCode(function (err, result) {\n            if (err) {\n              // Verification Unsuccessfully Sent to the Email\n              swal({\n                title: \"Verification Code Error\",\n                text: \"Error resending the Verification Code.\",\n                icon: \"error\",\n                buttons: [false, true]\n              }).then(data => {\n                if (data === true) {\n                  renderModal(user);\n                }\n              });\n            } else {\n              // Verification Successfully Sent to the Email\n              swal({\n                title: \"Verification Code Sent!\",\n                text: \"Please check your registered email for the verification code.\",\n                icon: \"success\",\n                buttons: [false, true]\n              }).then(data => {\n                if (data === true) {\n                  renderModal(user);\n                }\n              });\n            }\n          });\n          break;\n        // When Verify Button is Pressed - Verify the Code in the Form\n\n        case \"verify\":\n          // Check Whether User Exists\n          let verificationCode = document.getElementById(\"confirmAccountCode\").value;\n\n          if (verificationCode) {\n            user.confirmRegistration(verificationCode, true, function (err, result) {\n              if (err) {\n                // Account Verification Error\n                swal({\n                  title: \"Error in Verification\",\n                  text: err.message,\n                  icon: \"error\",\n                  buttons: [false, true]\n                }).then(data => {\n                  if (data === true) {\n                    renderModal(user);\n                  }\n                });\n              } else {\n                // Account Successfully Verified\n                swal({\n                  title: \"Account Verified Successfully!\",\n                  text: \"Account is now verified, and can be logged in.\",\n                  icon: \"success\",\n                  buttons: [false, true]\n                });\n              }\n            });\n          } else {\n            // Check if Ok is pressed and the Verifiction Code Field is Empty\n            swal({\n              title: \"No Verification Code Inputted!\",\n              text: \"Please input the verification code.\",\n              icon: \"error\",\n              buttons: [false, true]\n            }).then(data => {\n              if (data === true) {\n                renderModal(user);\n              }\n            });\n          }\n\n          break;\n        // Exit the Modal\n\n        default:\n          break;\n      }\n    });\n  }\n\n  return renderModal(currentUser);\n};\n\nexport { getSession, getUser, authenticate, logout, googleSignInCallBack, facebookSignInCallBack, resetPasswordModal, AccountVerificationModal };","map":{"version":3,"sources":["C:/Users/admin/Downloads/School Stuff/Year 3/Research and Development Part 2/weareus-mvp-website/src/manage-accounts/Accounts.js"],"names":["React","UserPool","swal","Form","CognitoUser","AuthenticationDetails","AWS","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","getUser","email","Username","toLowerCase","Pool","logout","signOut","googleSignInCallBack","authResult","console","log","error","getClientId","config","credentials","CognitoIdentityCredentials","IdentityPoolId","Logins","get","facebookSignInCallBack","FB","window","login","response","authResponse","accessToken","authenticate","Password","authDetails","authenticateUser","onSuccess","data","onFailure","title","text","message","icon","buttons","newPasswordRequired","then","resetPasswordModal","getResetPasswordForm","resetCode","content","closeOnClickOutside","closeOnEsc","document","getElementById","value","newPass","confirmPass","resetPasswordForm","code","confirmPassword","timer","sendCode","valueData","resetEmail","forgotPassword","inputVerificationCode","AccountVerificationModal","currentUser","renderModal","cancel","resendCode","verify","resendConfirmationCode","result","verificationCode","confirmRegistration"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport UserPool from \"./UserPool\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { signin } from \"../actions\";\r\nimport AWS from \"aws-sdk\";\r\n\r\n/* Setting up All The Redux States and Variablees*/\r\n// const isLogged = useSelector((state) => state.isLogged);\r\n// const dispatch = useDispatch();\r\n\r\n// Function to Get the Current Session's Information (Logged in or not)\r\nconst getSession = async () => {\r\n  await new Promise((resolve, reject) => {\r\n    const user = UserPool.getCurrentUser();\r\n    if (user) {\r\n      user.getSession((err, session) => {\r\n        if (err) {\r\n          reject();\r\n        } else {\r\n          resolve(session);\r\n        }\r\n      });\r\n    } else {\r\n      reject();\r\n    }\r\n  });\r\n};\r\n\r\n// Returns a Cognitouser based on the email\r\nfunction getUser(email) {\r\n  return new CognitoUser({\r\n    Username: email.toLowerCase(),\r\n    Pool: UserPool,\r\n  });\r\n}\r\n\r\n// Function to logout the User\r\nconst logout = () => {\r\n  const user = UserPool.getCurrentUser();\r\n  if (user) {\r\n    user.signOut();\r\n    // dispatch(signin());\r\n  }\r\n};\r\n\r\n// Google Sign-in button's callback when pressed\r\nfunction googleSignInCallBack(authResult) {\r\n  console.log(authResult);\r\n  if (!authResult.error) {\r\n    // Add the Google access token to the Amazon Cognito credentials login map.\r\n    console.log(UserPool.getClientId());\r\n    console.log(authResult[\"tokenId\"]);\r\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n      IdentityPoolId: \"ap-southeast-2_70XMXEzjd\",\r\n      Logins: {\r\n        \"accounts.google.com\": authResult[\"tokenId\"],\r\n      },\r\n    });\r\n\r\n    // Obtain AWS credentials\r\n    AWS.config.credentials.get(function () {\r\n      // Access AWS resources here.\r\n    });\r\n  }\r\n}\r\n\r\n// Facebook Sign-in button's callback when pressed\r\nfunction facebookSignInCallBack() {\r\n  const FB = window.FB;\r\n  FB.login(function (response) {\r\n    // Check if the user logged in successfully.\r\n    if (response.authResponse) {\r\n      // Add the Facebook access token to the Amazon Cognito credentials login map.\r\n      AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n        IdentityPoolId: \"ap-southeast-2_70XMXEzjd\",\r\n        Logins: {\r\n          \"graph.facebook.com\": response.authResponse.accessToken,\r\n        },\r\n      });\r\n\r\n      // Obtain AWS credentials\r\n      AWS.config.credentials.get(function () {\r\n        // Access AWS resources here.\r\n      });\r\n    } else {\r\n      console.log(\"There was a problem logging you in.\");\r\n    }\r\n  });\r\n}\r\n\r\n// Function to Authenticate Users in AWS Cognito\r\nconst authenticate = (Username, Password) => {\r\n  return new Promise((resolve, reject) => {\r\n    const user = new CognitoUser({ Username, Pool: UserPool });\r\n    const authDetails = new AuthenticationDetails({ Username, Password });\r\n\r\n    user.authenticateUser(authDetails, {\r\n      onSuccess: (data) => {\r\n        resolve(data);\r\n      },\r\n      onFailure: (err) => {\r\n        console.log(\"Authenticate User Error\" + err);\r\n        // Problems in Authentication\r\n        swal({\r\n          title: \"Authentication Error!\",\r\n          text: err.message,\r\n          icon: \"error\",\r\n          buttons: [false, true],\r\n        });\r\n        reject(err);\r\n      },\r\n      newPasswordRequired: (data) => {\r\n        console.log(data);\r\n        swal({\r\n          title: \"New Password Required!\",\r\n          icon: \"error\",\r\n          buttons: [false, true],\r\n        }).then(() => {\r\n          resetPasswordModal();\r\n        });\r\n        resolve(data);\r\n      },\r\n    });\r\n  });\r\n};\r\n\r\n// Shows the Reset Password Modal\r\nconst resetPasswordModal = () => {\r\n  // Generates the Reset Password Form to be called over and over again\r\n  function getResetPasswordForm(email, resetCode) {\r\n    return swal({\r\n      title: \"Change your Password!\",\r\n      text:\r\n        \"Password has to be longer than 8 characters, numbers, has uppercase and lowercase letters.\",\r\n      content: (\r\n        <div className=\"resetFormStyle\">\r\n          {/* Form Section for Checking Verification Code */}\r\n          <Form.Group controlId=\"resetCode\">\r\n            <Form.Control\r\n              placeholder=\"Verification Code\"\r\n              defaultValue={resetCode ? resetCode : \"\"}\r\n            />\r\n          </Form.Group>\r\n          {/* Form Section for Resetting Password */}\r\n          <Form.Group controlId=\"newPass\">\r\n            <Form.Control type=\"password\" placeholder=\"New Password\" />\r\n          </Form.Group>\r\n          {/* Form Section for Confirming Set New Password */}\r\n          <Form.Group controlId=\"confirmPass\">\r\n            <Form.Control type=\"password\" placeholder=\"Confirm Password\" />\r\n          </Form.Group>\r\n        </div>\r\n      ),\r\n      buttons: [true, \"Reset Password\"],\r\n      closeOnClickOutside: false,\r\n      closeOnEsc: false,\r\n    }).then((data) => {\r\n      if (data === true) {\r\n        // Reset Password Based on the Input Fields\r\n        let resetCode = document.getElementById(\"resetCode\").value;\r\n        let newPass = document.getElementById(\"newPass\").value;\r\n        let confirmPass = document.getElementById(\"confirmPass\").value;\r\n        resetPasswordForm(email, resetCode, newPass, confirmPass);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Function for Resetting the Password\r\n  function resetPasswordForm(email, code, newPass, confirmPass) {\r\n    if (newPass !== confirmPass) {\r\n      // Both passwords are not the same\r\n      swal({\r\n        title: \"Password and Confirm Password is not the same.\",\r\n        icon: \"error\",\r\n        buttons: [false, true],\r\n        closeOnClickOutside: false,\r\n        closeOnEsc: false,\r\n      }).then((data) => {\r\n        if (data === true) {\r\n          getResetPasswordForm(email, code);\r\n        }\r\n      });\r\n    } else {\r\n      getUser(email).confirmPassword(code, newPass, {\r\n        onSuccess: (data) => {\r\n          // Successful Reset Password Modal\r\n          swal({\r\n            title: \"Password Successfully Resetted!\",\r\n            icon: \"success\",\r\n            timer: 3000,\r\n            buttons: [false, true],\r\n            closeOnClickOutside: false,\r\n            closeOnEsc: false,\r\n          });\r\n        },\r\n        onFailure: (err) => {\r\n          // Unsuccessful Reset Password Modal\r\n          swal({\r\n            title: \"Reset Password Error!\",\r\n            text: \"Something went wrong when resetting your password.\",\r\n            icon: \"error\",\r\n            buttons: [false, true],\r\n            closeOnClickOutside: false,\r\n            closeOnEsc: false,\r\n          }).then((data) => {\r\n            if (data === true) {\r\n              getResetPasswordForm(email, code);\r\n            }\r\n          });\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // Function to Send The Code to the Verification User's Email\r\n  function sendCode() {\r\n    // Reset Password Modal\r\n    swal({\r\n      title: \"Forgot Password?\",\r\n      text: \"Send a verification code to your forgotten account's email.\",\r\n      content: (\r\n        /* Form Section for Checking Verification Code */\r\n        <Form.Group controlId=\"resetEmail\">\r\n          <Form.Control type=\"email\" placeholder=\"Reset Email\" />\r\n        </Form.Group>\r\n      ),\r\n      icon: \"info\",\r\n      buttons: [true, true],\r\n      closeOnClickOutside: false,\r\n      closeOnEsc: false,\r\n    }).then((valueData) => {\r\n      if (valueData === true) {\r\n        // Check Whether User Exists\r\n        let resetEmail = document.getElementById(\"resetEmail\").value;\r\n        if (resetEmail) {\r\n          getUser(resetEmail).forgotPassword({\r\n            onSuccess: (data) => {},\r\n            // Unsuccessful Forget Password Email Sent\r\n            onFailure: (err) => {\r\n              swal({\r\n                title: \"Email is Incorrect!\",\r\n                text: err.message,\r\n                icon: \"error\",\r\n                buttons: [false, true],\r\n              });\r\n            },\r\n            // Successful Forget Password Email Sent\r\n            inputVerificationCode: (data) => {\r\n              getResetPasswordForm(resetEmail);\r\n            },\r\n          });\r\n        } else {\r\n          // Check if Ok is pressed and the Email Field is Empty\r\n          swal({\r\n            title: \"Email Field is Empty!\",\r\n            text: \"Please input an existing email.\",\r\n            icon: \"error\",\r\n            buttons: [false, true],\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return sendCode();\r\n};\r\n\r\n// Asks for a Cognito User and Render the Modal\r\nconst AccountVerificationModal = (currentUser) => {\r\n  function renderModal(user) {\r\n    return swal({\r\n      title: \"Account Verification\",\r\n      text:\r\n        \"A verification code should be sent to your email. If not, press the resend button below.\",\r\n      content: (\r\n        /* Form Section for Checking Verification Code */\r\n        <Form.Group controlId=\"confirmAccountCode\">\r\n          <Form.Control type=\"text\" placeholder=\"Verification Code\" />\r\n        </Form.Group>\r\n      ),\r\n      icon: \"info\",\r\n      buttons: {\r\n        cancel: \"Cancel\",\r\n        resendCode: \"Resend Code\",\r\n        verify: \"Verify\",\r\n      },\r\n      closeOnClickOutside: false,\r\n      closeOnEsc: false,\r\n    }).then((valueData) => {\r\n      switch (valueData) {\r\n        // When Resend Code Button is Pressed - Resend the Verification Code to the Email\r\n        case \"resendCode\":\r\n          user.resendConfirmationCode(function (err, result) {\r\n            if (err) {\r\n              // Verification Unsuccessfully Sent to the Email\r\n              swal({\r\n                title: \"Verification Code Error\",\r\n                text: \"Error resending the Verification Code.\",\r\n                icon: \"error\",\r\n                buttons: [false, true],\r\n              }).then((data) => {\r\n                if (data === true) {\r\n                  renderModal(user);\r\n                }\r\n              });\r\n            } else {\r\n              // Verification Successfully Sent to the Email\r\n              swal({\r\n                title: \"Verification Code Sent!\",\r\n                text:\r\n                  \"Please check your registered email for the verification code.\",\r\n                icon: \"success\",\r\n                buttons: [false, true],\r\n              }).then((data) => {\r\n                if (data === true) {\r\n                  renderModal(user);\r\n                }\r\n              });\r\n            }\r\n          });\r\n          break;\r\n\r\n        // When Verify Button is Pressed - Verify the Code in the Form\r\n        case \"verify\":\r\n          // Check Whether User Exists\r\n          let verificationCode = document.getElementById(\"confirmAccountCode\")\r\n            .value;\r\n          if (verificationCode) {\r\n            user.confirmRegistration(verificationCode, true, function (\r\n              err,\r\n              result\r\n            ) {\r\n              if (err) {\r\n                // Account Verification Error\r\n                swal({\r\n                  title: \"Error in Verification\",\r\n                  text: err.message,\r\n                  icon: \"error\",\r\n                  buttons: [false, true],\r\n                }).then((data) => {\r\n                  if (data === true) {\r\n                    renderModal(user);\r\n                  }\r\n                });\r\n              } else {\r\n                // Account Successfully Verified\r\n                swal({\r\n                  title: \"Account Verified Successfully!\",\r\n                  text: \"Account is now verified, and can be logged in.\",\r\n                  icon: \"success\",\r\n                  buttons: [false, true],\r\n                });\r\n              }\r\n            });\r\n          } else {\r\n            // Check if Ok is pressed and the Verifiction Code Field is Empty\r\n            swal({\r\n              title: \"No Verification Code Inputted!\",\r\n              text: \"Please input the verification code.\",\r\n              icon: \"error\",\r\n              buttons: [false, true],\r\n            }).then((data) => {\r\n              if (data === true) {\r\n                renderModal(user);\r\n              }\r\n            });\r\n          }\r\n          break;\r\n\r\n        // Exit the Modal\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  return renderModal(currentUser);\r\n};\r\n\r\nexport {\r\n  getSession,\r\n  getUser,\r\n  authenticate,\r\n  logout,\r\n  googleSignInCallBack,\r\n  facebookSignInCallBack,\r\n  resetPasswordModal,\r\n  AccountVerificationModal,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}