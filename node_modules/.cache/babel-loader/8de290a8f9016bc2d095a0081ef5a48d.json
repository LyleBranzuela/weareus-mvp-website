{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar swal = _interopDefault(require('sweetalert'));\n\nvar index = async (...args) => {\n  const newOptions = await getOptions(...args);\n  return swal(newOptions);\n};\n\nconst bindActions = swalInstance => {\n  for (const method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\n\nconst getOptions = async (params, {\n  identifier,\n  transformer\n}) => {\n  let newOptions = await transformParams(params, identifier, transformer);\n  newOptions = Object.assign({}, parseTextParams(params), newOptions);\n  const lastParam = params[params.length - 1];\n  /*\n   * So that we don't lose other specified options\n   * such as buttons... etc.\n   */\n\n  if (isOptionsParam(lastParam, identifier)) {\n    newOptions = Object.assign({}, lastParam, newOptions);\n  }\n\n  return newOptions;\n};\n\nconst parseTextParams = params => {\n  const options = {};\n\n  const isString = param => typeof param === \"string\";\n\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n\n  return options;\n}; // Return true if param is a SwalOptions object\n\n\nconst isOptionsParam = (param, isTransformable) => param.constructor === Object && !isTransformable(param);\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\n\n\nconst transformParams = async (params, isTransformable, transformer) => {\n  // Check if the transform returns a DOM synchronously\n  // or if it is a promise:\n  const isAsync = transformer() instanceof Promise;\n  /*\n   * Example:\n   *   swal(<div>Hello!</div>);\n   */\n\n  const transformSingleParam = async () => {\n    const el = params[0];\n    if (!isTransformable(el)) return;\n    const newContent = await transformEl(el, transformer, isAsync);\n    return {\n      content: newContent\n    };\n  };\n  /*\n   * Example:\n   *   swal(\"Hi\", { \n   *     content: <div>Hello!</div> \n   *   })\n   */\n\n\n  const transformContentOption = async () => {\n    const lastParamIndex = params.length - 1;\n    const lastParam = params[lastParamIndex];\n    if (!lastParam || !lastParam.content) return;\n    let {\n      content,\n      button\n    } = lastParam;\n\n    if (isTransformable(content)) {\n      content = await transformEl(content, transformer, isAsync);\n    }\n    /* TODO?\n    if (isTransformable(button)) {\n      button = await transformEl(button, transformer, isAsync);\n    }\n    */\n\n\n    return {\n      content //button,\n\n    };\n  };\n  /*\n   * Only transform the params that can \n   * have a DOM node as their value\n   */\n\n\n  const newOpts = await Promise.all([transformSingleParam(), transformContentOption()]);\n  return Object.assign({}, ...newOpts);\n}; // Transform a single option\n\n\nconst transformEl = async (el, transformer, isAsync) => {\n  return isAsync ? await transformer(el) : transformer(el);\n};\n\nexports['default'] = index;\nexports.bindActions = bindActions;","map":{"version":3,"sources":["C:/Users/admin/Downloads/School Stuff/Year 3/Research and Development Part 2/weareus-mvp-website/node_modules/@sweetalert/transformer/dist/transformer.js"],"names":["Object","defineProperty","exports","value","_interopDefault","ex","swal","require","index","args","newOptions","getOptions","bindActions","swalInstance","method","params","identifier","transformer","transformParams","assign","parseTextParams","lastParam","length","isOptionsParam","options","isString","param","text","title","icon","isTransformable","constructor","isAsync","Promise","transformSingleParam","el","newContent","transformEl","content","transformContentOption","lastParamIndex","button","newOpts","all"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar swal = _interopDefault(require('sweetalert'));\n\nvar index = async (...args) => {\n  const newOptions = await getOptions(...args);\n\n  return swal(newOptions);\n};\n\nconst bindActions = (swalInstance) => {\n  for (const method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\n\nconst getOptions = async (params, {\n  identifier,\n  transformer,\n}) => {\n\n  let newOptions = await transformParams(\n    params, \n    identifier, \n    transformer, \n  );\n\n  newOptions = Object.assign({}, parseTextParams(params), newOptions);\n\n  const lastParam = params[params.length - 1];\n\n  /*\n   * So that we don't lose other specified options\n   * such as buttons... etc.\n   */\n  if (isOptionsParam(lastParam, identifier)) {\n    newOptions = Object.assign({}, lastParam, newOptions);\n  }\n\n  return newOptions;\n};\n\nconst parseTextParams = params => {\n  const options = {};\n\n  const isString = param => typeof param === \"string\";\n\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n\n  return options;\n};\n\n// Return true if param is a SwalOptions object\nconst isOptionsParam = (param, isTransformable) => (\n  (param.constructor === Object) && \n  (!isTransformable(param))\n);\n\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\nconst transformParams = async (params, isTransformable, transformer) => {\n\n  // Check if the transform returns a DOM synchronously\n  // or if it is a promise:\n  const isAsync = transformer() instanceof Promise;\n\n  /*\n   * Example:\n   *   swal(<div>Hello!</div>);\n   */\n  const transformSingleParam = async () => {\n    const el = params[0];\n\n    if (!isTransformable(el)) return;\n\n    const newContent = await transformEl(el, transformer, isAsync);\n\n    return {\n      content: newContent,\n    };\n  };\n\n  /*\n   * Example:\n   *   swal(\"Hi\", { \n   *     content: <div>Hello!</div> \n   *   })\n   */\n  const transformContentOption = async () => {\n    const lastParamIndex = (params.length - 1);\n    const lastParam = params[lastParamIndex];\n\n    if (!lastParam || !lastParam.content) return;\n\n    let { content, button } = lastParam;\n\n    if (isTransformable(content)) {\n      content = await transformEl(content, transformer, isAsync);\n    }\n\n    /* TODO?\n    if (isTransformable(button)) {\n      button = await transformEl(button, transformer, isAsync);\n    }\n    */\n\n    return {\n      content,\n      //button,\n    };\n  };\n\n  /*\n   * Only transform the params that can \n   * have a DOM node as their value\n   */\n  const newOpts = await Promise.all([\n    transformSingleParam(),\n    transformContentOption(),\n  ]);\n\n  return Object.assign({}, ...newOpts);\n};\n\n// Transform a single option\nconst transformEl = async (el, transformer, isAsync) => {\n  return (isAsync) ? await transformer(el) : transformer(el);\n};\n\nexports['default'] = index;\nexports.bindActions = bindActions;\n"]},"metadata":{},"sourceType":"script"}